<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:deg="clr-namespace:RingSoft.DataEntryControls.WPF.DataEntryGrid;assembly=RingSoft.DataEntryControls.WPF"
                    xmlns:dec="clr-namespace:RingSoft.DataEntryControls.WPF;assembly=RingSoft.DataEntryControls.WPF"
                    xmlns:lc="clr-namespace:RingSoft.DbLookup.Controls.WPF;assembly=RingSoft.DbLookup.Controls.WPF">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary
            Source="pack://application:,,,/RingSoft.DataEntryControls.WPF;component/Themes/DataEntryControlsStyles.xaml" />
        <ResourceDictionary
            Source="pack://application:,,,/RingSoft.App.Controls;component/Themes/BrushesResourceDictionary.xaml" />
        <ResourceDictionary
            Source="pack://application:,,,/RingSoft.App.Controls;component/Themes/ComboBoxResourceDictionary.xaml" />

    </ResourceDictionary.MergedDictionaries>

    <dec:ComparisonConverter x:Key="ComparisonConverter" />

    <Style TargetType="ListView">
        <Setter Property="Background" Value="{StaticResource ControlBackgroundBrush}"/>
    </Style>

    <Style TargetType="Button" x:Key="{x:Type Button}">
        <Setter Property="Background" Value="{StaticResource ButtonBackgroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border CornerRadius="5" 
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="2,0">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="True"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.25"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{StaticResource ButtonMouseOverBrush}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="TabControl">
        <Setter Property="Background" Value="{StaticResource WindowBackgroundBrush}"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>

    <Style TargetType="TabItem" x:Key="{x:Type TabItem}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabItem">
                    <Border
                        Name="Border"
                        Margin="1,0"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="4,4,0,0">
                        <ContentPresenter
                            x:Name="ContentSite"
                            Margin="2,0"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            ContentSource="Header" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background"
                                    Value="{StaticResource TabItemSelectedBrush}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="Border" Property="Background"
                                    Value="{StaticResource TabItemNotSelectedBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="dec:DataEntryMemoTabItem" x:Key="{x:Type dec:DataEntryMemoTabItem}" BasedOn="{StaticResource {x:Type dec:DataEntryMemoTabItem}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="dec:DataEntryMemoTabItem">
                    <Border
                        Name="Border"
                        Margin="1,0"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="4,4,0,0">
                        <StackPanel Orientation="Horizontal"
                                    Margin="2,0"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center">

                            <TextBlock Text="{TemplateBinding Header}" VerticalAlignment="Center" />

                            <Ellipse x:Name="Notifier" Height="8" Width="8" Fill="Red" Visibility="{Binding RelativeSource={RelativeSource AncestorType=dec:DataEntryMemoTabItem}, Path=NotificationVisibility}" Margin="5,0,0,0" VerticalAlignment="Center"/>

                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="Border" Property="Background"
                                    Value="{StaticResource TabItemSelectedBrush}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="Border" Property="Background"
                                    Value="{StaticResource TabItemNotSelectedBrush}" />
                        </Trigger>
                        <Trigger Property="MemoHasText" Value="True">
                            <Setter Property="NotificationVisibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="MemoHasText" Value="False">
                            <Setter Property="NotificationVisibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="dec:ContentComboBoxControl" x:Key="{x:Type dec:ContentComboBoxControl}"
           BasedOn="{StaticResource {x:Type ComboBox}}" />

    <Style TargetType="dec:TextComboBoxControl" x:Key="{x:Type dec:TextComboBoxControl}"
           BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="Height" Value="20"/>
    </Style>

    <Style TargetType="TextBox" x:Key="{x:Type TextBox}">
        <Setter Property="Background" Value="{StaticResource ControlBackgroundBrush}"/>
    </Style>

    <Style TargetType="TextBox" x:Key="AppTextBoxStyle" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Height" Value="20" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
    </Style>

    <!--<Style TargetType="TextBox" BasedOn="{StaticResource GlobalTextBoxStyle}" />-->

    <Style TargetType="dec:StringEditControl" x:Key="GlobalStringEditControlStyle"
                   BasedOn="{StaticResource AppTextBoxStyle}">
        <Setter Property="SelectAllOnGotFocus" Value="True" />
    </Style>

    <Style TargetType="dec:StringEditControl" BasedOn="{StaticResource GlobalStringEditControlStyle}" />

    <Style TargetType="dec:ReadOnlyBox" x:Key="{x:Type dec:ReadOnlyBox}">
        <Setter Property="Height" Value="20" />
        <Setter Property="Margin" Value="2.5" />
        <Setter Property="Background" Value="{StaticResource ReadOnlyControlBackgroundBrush}"/>
    </Style>
    <Style TargetType="dec:StringReadOnlyBox" x:Key="{x:Type dec:StringReadOnlyBox}"
           BasedOn="{StaticResource {x:Type dec:ReadOnlyBox}}" />

    <Style TargetType="dec:DecimalReadOnlyBox" x:Key="{x:Type dec:DecimalReadOnlyBox}"
           BasedOn="{StaticResource {x:Type dec:ReadOnlyBox}}" />

    <Style TargetType="Label" x:Key="ControlLabel">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Right" />
        <!--<Setter Property="Margin" Value="2.5"/>-->
    </Style>

    <Style TargetType="deg:DataEntryGrid">
        <Setter Property="EnterToTab" Value="True" />
        <Setter Property="CloseWindowOnEscape" Value="True" />
        <Setter Property="GridLinesVisibility" Value="All" />
        <Setter Property="HorizontalGridLinesBrush" Value="LightGray" />
        <Setter Property="VerticalGridLinesBrush" Value="LightGray" />
        <Setter Property="AlternationCount" Value="2" />
        <Setter Property="DisabledCellDisplayStyle">
            <Setter.Value>
                <deg:DataEntryGridDisplayStyle ForegroundBrush="Black" BackgroundBrush="{StaticResource GridDisabledCellBrush}"/>
            </Setter.Value>
        </Setter>

        <!--Cougar Mountain Software-->
        <!--<Setter Property="StoreCurrentCellOnLostFocus" Value="True"/>
                <Setter Property="SetTabFocusToSelectedCell" Value="True"/>-->

    </Style>

    <Style TargetType="{x:Type DataGridRow}">
        <Style.Triggers>
            <Trigger Property="ItemsControl.AlternationIndex" Value="0">
                <Setter Property="Background" Value="{StaticResource GridAlternatingRowBrush1}"/>
            </Trigger>
            <Trigger Property="ItemsControl.AlternationIndex" Value="1">
                <Setter Property="Background" Value="{StaticResource GridAlternatingRowBrush2}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="DataGridColumnHeader">
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock TextAlignment="Center" Text="{Binding}"></TextBlock>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>