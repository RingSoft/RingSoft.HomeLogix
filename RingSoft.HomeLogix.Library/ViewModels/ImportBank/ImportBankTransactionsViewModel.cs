using RingSoft.DataEntryControls.Engine;
using RingSoft.HomeLogix.Library.ViewModels.Budget;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Runtime.CompilerServices;
using RingSoft.App.Library;

namespace RingSoft.HomeLogix.Library.ViewModels.ImportBank
{
    public interface IImportTransactionView
    {
        bool ShowImportBankBudgetWindow(ImportTransactionGridRow row);

        void CloseWindow(bool dialogResult);

        string GetQifFile();

        void ShowQifMaintenanceWindow();

        void ShowExpiredWindow(List<BankAccountRegisterGridRow> expiredItems);
    }
    public class ImportBankTransactionsViewModel :INotifyPropertyChanged
    {
        private string _bankAccountText;

        public string BankAccountText
        {
            get => _bankAccountText;
            set
            {
                if (_bankAccountText == value)
                {
                    return;
                }
                _bankAccountText = value;
                OnPropertyChanged();
            }
        }

        private ImportTransactionsGridManager _manager;

        public ImportTransactionsGridManager Manager
        {
            get => _manager;
            set
            {
                if (_manager == value)
                {
                    return;
                }
                _manager = value;
                OnPropertyChanged();
            }
        }


        public BankAccountViewModel BankViewModel { get; set; }

        public IImportTransactionView View { get; set; }

        public RelayCommand OkCommand { get; set; }

        public RelayCommand ImportQifCommand { get; set; }

        public RelayCommand ShowQifMaintenanceCommand { get; set; }

        public ImportBankTransactionsViewModel()
        {
            OkCommand = new RelayCommand(OnOk);
            ImportQifCommand = new RelayCommand(ImportQif);
            ShowQifMaintenanceCommand = new RelayCommand((() =>
            {
                View.ShowQifMaintenanceWindow();
            }));
        }

        public void Initialize(BankAccountViewModel bankAccountViewModel, IImportTransactionView view)
        {
            BankViewModel = bankAccountViewModel;
            View = view;
            BankAccountText = bankAccountViewModel.KeyAutoFillValue.Text;
            Manager = new ImportTransactionsGridManager(this);
            Manager.LoadGrid();
            if (bankAccountViewModel.LastCompleteDate.GetValueOrDefault().Year == 1980)
            {
                var message = "Use this window to add transactions from your bank statement or import a .QIF file generated by and downloaded from your bank's web site.  After you enter the bank transactions and click OK, it will match each transaction automatically to its nearest bank account register item and update your bank account's current balance.";
                var caption = "Import Bank Transactions";
                ControlsGlobals.UserInterface.ShowMessageBox(message, caption, RsMessageBoxIcons.Information);
            }
        }

        private async void OnOk()
        {
            if (Manager.Rows.FirstOrDefault(p => p.IsNew == false) != null)
            {
                Manager.Grid.CommitCellEdit();
                var message = "Do you wish to post the transactions to the register?";
                var caption = "Post To Register?";
                var result = await ControlsGlobals.UserInterface.ShowYesNoMessageBox(message, caption, true);
                if (result == MessageBoxButtonsResult.Yes)
                {
                    //Manager.PostTransactions();
                    //View.ShowPostProcedure();
                    var procedure = RingSoftAppGlobals.CreateAppProcedure();
                    procedure.DoAppProcedure += (sender, args) =>
                    {
                        Manager.PostTransactions(procedure.SplashWindow);
                    };
                    procedure.Start("Posting Transactions to Register");
                    return;
                }
                if (Manager.SaveTransactions())
                {
                    View.CloseWindow(true);
                }
            }
            else
            {
                if (AppGlobals.DataRepository.DeleteTransactions(BankViewModel.Id))
                    View.CloseWindow(false);
            }
        }

        private void ImportQif()
        {
            var qifText = View.GetQifFile();
            if (qifText.IsNullOrEmpty())
            {
                return;
            }

            //ImportQifFile(qifText);
            //View.ShowImportQifProcedure(qifText);
            var procedure = RingSoftAppGlobals.CreateAppProcedure();
            procedure.DoAppProcedure += (sender, args) =>
            {
                ImportQifFile(qifText, procedure.SplashWindow);
            };
            procedure.Start("Importing QIF File");
        }

        public void ImportQifFile(string qifText, ISplashWindow splashWindow)
        {
            var registerStartDate = DateTime.MinValue;
            var startDate = DateTime.MinValue;
            var incompleteRows = BankViewModel.RegisterGridManager.Rows.OfType<BankAccountRegisterGridRow>()
                .Where(p => !p.Completed);
            if (incompleteRows.Any())
            {
                registerStartDate = incompleteRows.Min(p => p.ItemDate);
            }

            if (BankViewModel.LastCompleteDate == new DateTime(1980,1,1))
            {
                startDate = registerStartDate;
            }
            else
            {
                startDate = BankViewModel.LastCompleteDate.Value;
                var existingRows = Manager.Rows
                    .OfType<ImportTransactionGridRow>().Where(p => !p.IsNew && !p.Description.IsNullOrEmpty());
                if (existingRows.Any())
                {
                    var existingDate = existingRows.Max(p => p.Date);
                    if (startDate < existingDate)
                    {
                        startDate = existingDate;
                    }
                }
            }

            var importRows = new List<ImportTransactionGridRow>();

            var columnPos = qifText.IndexOf("C*");

            while (columnPos >= 0)
            {
                var row = GetRowValue(qifText, columnPos, startDate);
                if (row == null)
                {
                    FinishImport(importRows, splashWindow);
                    return;
                }
                else
                {
                    splashWindow.SetProgress($"Processing {row.Description}");
                }
                row.FromBank = true;
                importRows.Add(row);
                //columnPos = qifText.IndexOf("^", columnPos);
                var newColumnPos = qifText.IndexOf("C*\n", columnPos + 3);
                if (newColumnPos == -1)
                {
                    newColumnPos = qifText.IndexOf("C*\r\n", columnPos + 4);
                }

                columnPos = newColumnPos;
            }

            FinishImport(importRows, splashWindow);
        }

        private void FinishImport(List<ImportTransactionGridRow> importRows, ISplashWindow splashWindow)
        {
            importRows = importRows.OrderBy(p => p.Date).ToList();
            if (importRows.Any())
            {
                Manager.ImportFromQif(importRows, splashWindow);
            }
            else
            {
                ShowNothingToDo(splashWindow);

            }

            var newRows = Manager.Rows.OfType<ImportTransactionGridRow>().OrderBy(p => p.Date).ToList();
            if (newRows.Any())
            {
                Manager.Grid?.GotoCell(newRows[0], ImportTransactionGridRow.RegisterItemColumnId);
            }
        }

        private void ShowNothingToDo(ISplashWindow splashWindow)
        {
            var message = "Nothing was found to import.";
            var caption = "Nothing To Do";
            
            splashWindow.ShowMessageBox(message, caption, RsMessageBoxIcons.Exclamation);
        }

        private ImportTransactionGridRow GetRowValue(string qifText, int columnPos, DateTime startDate)
        {
            var date = GetQifValue(qifText, columnPos, "D");
            if (date.IsNullOrEmpty())
                return null;

            var rowDate = DateTime.MinValue;
            if (!DateTime.TryParse(date, out rowDate))
                return null;

            var processRow = true;
            if (BankViewModel.LastCompleteDate.Value.Year == 1980)
            {
                processRow = rowDate >= startDate;
            }
            else
            {
                processRow = rowDate > startDate;
            }

            if (processRow)
            {
                if (rowDate.Month == 9 && rowDate.Day < 6)
                {
                    
                }
                var text = GetQifValue(qifText, columnPos, "P");
                var amountText = GetQifValue(qifText, columnPos, "T");

                var amount = (double) 0;
                if (!double.TryParse(amountText, out amount))
                    return null;

                var row = new ImportTransactionGridRow(Manager);
                if (amount < 0)
                {
                    row.TransactionTypes = TransactionTypes.Withdrawal;
                }
                else
                {
                    row.TransactionTypes = TransactionTypes.Deposit;
                }
                amount = Math.Abs(amount);
                row.Amount = amount;
                row.Date = rowDate;
                row.Description = text;
                row.MapTransaction = false;
                return row;
            }
            else
            {
                return null;
            }
        }

        private static string GetQifValue(string qifText, int columnPos, string prefix)
        {
            var crlfText = "\n";
            var checkPrefix = $"{crlfText}{prefix}";
            var valuePos = qifText.IndexOf(checkPrefix, columnPos);
            if (valuePos < 0)
            {
                crlfText = "\r\n";
                checkPrefix = $"{crlfText}{prefix}";
                valuePos = qifText.IndexOf(checkPrefix, columnPos);
                if (valuePos < 0)
                {
                    return string.Empty;
                }
            }
            var crLfPos = qifText.IndexOf(crlfText, valuePos + checkPrefix.Length);
            var result = qifText.MidStr(valuePos, crLfPos - valuePos).Trim();
            if (result.StartsWith(prefix))
            {
                result = result.RightStr(result.Length - 1);
            }
            return result;
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
